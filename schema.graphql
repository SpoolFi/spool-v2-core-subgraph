type SmartVault @entity {
    id: ID!
    name: String!
    riskTolerance: Int
    assetGroup: AssetGroup!
    lastRebalanceTime: BigInt!
    rebalanceCount: BigInt!
    smartVaultOwner: String!
    allocationProvider: String
    riskProvider: RiskProvider
    createdOn: BigInt!
    svtTotalSupply: BigDecimal!
    smartVaultFees: SmartVaultFees!
    guardsInitialized: Boolean!
    smartVaultStrategies: [SmartVaultStrategy!]!
    smartVaultDepositNFTs: [SmartVaultDepositNFT!]! @derivedFrom(field: "smartVault")
    smartVaultWithdrawalNFTs: [SmartVaultWithdrawalNFT!]! @derivedFrom(field: "smartVault")
    smartVaultFlushes: [SmartVaultFlush!]! @derivedFrom(field: "smartVault")
    smartVaultRewardTokens: [SmartVaultRewardToken!]! @derivedFrom(field: "smartVault")
    guards: [SmartVaultToGuard!]! @derivedFrom(field: "smartVault")
}

type AssetGroup @entity {
    id: ID!
    assetGroupTokens: [AssetGroupToken!]!
}

type AssetGroupToken @entity {
    id: ID! # Set to `${assetGroup.id}-${token.id}`
    assetGroup: AssetGroup!
    token: Token!
}

type SmartVaultStrategy @entity {
    id: ID! # Set to `${smartVault.id}-${strategy.id}`
    smartVault: SmartVault!
    strategy: Strategy!
    allocation: BigInt!
}

type SmartVaultFees @entity {
    id: ID! # Set to smartVault address
    peformanceFeePercentage: BigDecimal!
    depositFeePercentage: BigDecimal!
    managementFeePercentage: BigDecimal!
}

type SmartVaultFlush @entity {
    id: ID! # Set to `{smartVault.id}-${flushId}`
    smartVault: SmartVault!
    flushId: BigInt!
    isExecuted: Boolean!
    timestamp: BigInt
    blockNumber: BigInt
    strategyDHWs: [StrategyDHW!] # strategy index do hard works
    SmartVaultDepositNFTs: [SmartVaultDepositNFT!]! @derivedFrom(field: "smartVaultFlush")
    SmartVaultWithdrawalNFTs: [SmartVaultWithdrawalNFT!]! @derivedFrom(field: "smartVaultFlush")
    withdrawnVaultShares: [WithdrawnVaultShares!]! @derivedFrom(field: "smartVaultFlush")
    vaultDeposits: [VaultDeposits!]! @derivedFrom(field: "smartVaultFlush")
}

type User @entity { 
    id: ID!
    smartVaultDepositNFTs: [SmartVaultDepositNFT!]! @derivedFrom(field: "user")
    SmartVaultDepositNFTsOwned: [SmartVaultDepositNFT!]! @derivedFrom(field: "owner")
    smartVaultWithdrawalNFTs: [SmartVaultWithdrawalNFT!]! @derivedFrom(field: "user")
    SmartVaultWithdrawalNFTsOwned: [SmartVaultWithdrawalNFT!]! @derivedFrom(field: "owner")
    userSmartVaults: [UserSmartVault!]! @derivedFrom(field: "user")
}

type SmartVaultDepositNFT @entity {
    id: ID! # Set to `{smartVault.id}-${nftId}`
    smartVault: SmartVault!
    nftId: BigInt!
    user: User!
    owner: User!
    shares: BigInt!
    assets: [BigDecimal!]!
    smartVaultFlush: SmartVaultFlush!
    isBurned: Boolean!
    createdOn: BigInt!
    blockNumber: Int!
    transferCount: Int!
    transfers: [SmartVaultDepositNFTTransfer!]! @derivedFrom(field: "dNFT")
}

type SmartVaultWithdrawalNFT @entity {
    id: ID! # Set to `{smartVault.id}-${nftId}`
    smartVault: SmartVault!
    nftId: BigInt!
    user: User!
    owner: User!
    shares: BigInt!
    svtWithdrawn: BigInt!
    smartVaultFlush: SmartVaultFlush!
    isBurned: Boolean!
    createdOn: BigInt!
    blockNumber: Int!
    transferCount: Int!
    transfers: [SmartVaultWithdrawalNFTTransfer!]! @derivedFrom(field: "wNFT")
}

type WithdrawnVaultShares @entity {
id: ID! # Set to `{smartVault.id}-${flushIndex}`
    smartVault: SmartVault!
    smartVaultFlush: SmartVaultFlush!
    shares: BigInt!
}

type VaultDeposits @entity {
    id: ID! # Set to `{smartVault.id}-${flushIndex}-${token.id}`
    smartVault: SmartVault!
    smartVaultFlush: SmartVaultFlush!
    token: Token!
    amount: BigDecimal!
}

type SmartVaultDepositNFTTransfer @entity {
    id: ID! # Set to nft.id-transferId
    dNFT: SmartVaultDepositNFT!
    transferId: Int!
    from: User!
    to: User!
    timestamp: Int!
}

type SmartVaultWithdrawalNFTTransfer @entity {
    id: ID! # Set to nft.id-transferId
    wNFT: SmartVaultWithdrawalNFT!
    transferId: Int!
    from: User!
    to: User!
    timestamp: Int!
}

type Token @entity {
    id: ID!
    symbol: String
    name: String
    decimals: Int!
}

type RiskProvider @entity {
    id: ID!
    isRemoved: Boolean!
    addedOn: BigInt!
    strategyRiskScores: [StrategyRiskScore!]! @derivedFrom(field: "riskProvider")
}

type StrategyRiskScore @entity { # not available utill risk provider providers a score
    id: ID! # Set to `${strategy.id}-${riskProvider.id}`
    strategy: Strategy!
    riskProvider: RiskProvider!
    riskScore: BigDecimal!
    updatedOn: BigInt!
}

type Strategy @entity {
    id: ID!
    name: String!
    assetGroup: AssetGroup!
    apy: BigDecimal!
    index: Int!
    lastDoHardWorkTime: BigInt!
    isRemoved: Boolean!
    isGhost: Boolean!
    addedOn: BigInt!
    riskScores: [StrategyRiskScore!]! @derivedFrom(field: "strategy")
    strategyDHWs: [StrategyDHW!]! @derivedFrom(field: "strategy")
}

type StrategyDHW @entity {
    id: ID! # Set to `${strategy.id}-${strategy.index}`
    strategy: Strategy!
    strategyDHWIndex: Int!
    isExecuted: Boolean!
    timestamp: BigInt
    blockNumber: BigInt
    ssts: BigInt
    apy: BigDecimal
    sharesRedeemed: BigInt!
    assetsDeposited: [StrategyDHWAssetDeposit!]! @derivedFrom(field: "strategyDHW")
}

type StrategyDHWAssetDeposit @entity {
    id: ID! # Set to `${strategyDHW.id}-${asset.id}`
    strategyDHW: StrategyDHW!
    asset: Token!
    amount: BigInt!
}

#################


type SmartVaultRewardToken @entity { # added when smartVault owner or smartVault DAO adds extra incentive
    id: ID! # Set to `${smartVault.id}-${token.id}`
    smartVault: SmartVault!
    token: Token!
    updatedOn: BigInt!
    startTime: BigInt!
    endTime: BigInt!
    totalAmount: BigDecimal!
    claimed: BigDecimal!
    rewardRate: BigInt!  # rate of reward tokens (including decimals) per second multiplied by accuracy (10**18) multiplier. To get token amount per second divide by (10**18)
    isRemoved: Boolean!
    updatesCount: Int!
    updates: [SmartVaultRewardTokenUpdate!]! @derivedFrom(field: "smartVaultRewardToken")
}

# ADD, EXTEND REWARD, REMOVE TOKEN

type SmartVaultRewardTokenUpdate @entity {
    id: ID! # Set to `${SmartVaultRewardToken.id}-${updateId}`
    smartVaultRewardToken: SmartVaultRewardToken!
    updateId: Int!
    createdOn: BigInt!
    blockNumber: BigInt
    amount: BigDecimal
    leftoverAmount: BigDecimal
    endTime: BigInt!
    rewardRate: BigInt!  # rate of reward tokens (including decimals) per second multiplied by accuracy (10**18) multiplier. To get token amount per second divide by (10**18)
    updateType: RewardTokenUpdateType!
}

enum RewardTokenUpdateType {
    ADD_REWARD
    EXTEND_REWARD
    REMOVE_TOKEN
    END_REWARD
}


################# User updates

type UserSmartVault @entity {
    id: ID! # set to `${user.id}-${smartVault.id}`
    user: User!
    smartVault: SmartVault!
    svtBalance: BigDecimal!
    userSmartVaultRewardTokens: [UserSmartVaultRewardToken!]! @derivedFrom(field: "userSmartVault")
}

type UserSmartVaultRewardToken @entity {
    id: ID! # set to `${user.id}-${smartVaultRewardToken.id}`
    userSmartVault: UserSmartVault!
    smartVaultRewardToken: SmartVaultRewardToken!
    claimed: BigDecimal!
    userSmartVaultRewardTokenCycles: [UserSmartVaultRewardTokenCycle!]! @derivedFrom(field: "userSmartVaultRewardToken")
}

type UserSmartVaultRewardTokenCycle @entity {
    id: ID! # set to `${UserSmartVaultRewardToken.id}-${cycle}`
    userSmartVaultRewardToken: UserSmartVaultRewardToken!
    cycle: Int!
    claimed: BigDecimal!
}


################# Guards


type Guard @entity {
    id: ID! # Set to hash of all data
    contractAddress: String!
    methodSignature: String!
    expectedValue: BigInt!
    operator: Int!
    requestType: RequestType!
    parameters: [GuardToParameter!]! @derivedFrom(field: "guard")
    vaults: [SmartVaultToGuard!]! @derivedFrom(field: "guard")
}

type Parameter @entity {
    id: ID! # Set to ${parameterType.id}-value
    parameterType: ParameterType!
    value: String!
}

type ParameterType @entity {
    id: ID! # Set to index of parameter type
    type: String!
}

type RequestType @entity {
    id: ID! # Set to index of request type
    type: String!
    guards: [Guard!]! @derivedFrom(field: "requestType")
}

type GuardToParameter @entity {
    id: ID! # Set to ${guard.id}-${parameter.id}
    guard: Guard!
    parameter: Parameter!
}

type SmartVaultToGuard @entity {
    id: ID! # Set to ${smartVault.id}-${guard.id}
    smartVault: SmartVault!
    guard: Guard!
}

